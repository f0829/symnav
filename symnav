#!/usr/bin/env python3

import os
import eel
import sys
import angr
import r2pipe
import logging
import models.other_models
import models.network_models
import models.internal_functions
from optparse import OptionParser
from utility.cfg_loader import compute_cfg
from angr_wrapper import AngrWrapper
from utility import util
import IPython

SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
WEB_DIR = os.path.join(SCRIPT_DIR, "web")
DATA_DIR = os.path.join(WEB_DIR, "data")
JSON_DIR = os.path.join(DATA_DIR, "json_data")

logging.getLogger("angr").setLevel(logging.ERROR)  # shut up
logging.getLogger("cle").setLevel(logging.ERROR)   # shut up


sys.setrecursionlimit(100000)

aw = None

@eel.expose
def prune_tree(filter_opts, commit):
    global aw
    if aw is None: return {}

    res = aw.apply_filters(filter_opts, commit)
    return res

@eel.expose
def continue_exploration(filter_opts, cont_data):
    global aw
    if aw is None: return {}

    aw.apply_filters(filter_opts, True)
    aw.run(
        10000,
        time_treshold=int(cont_data["time"]),
        mem_treshold=int(cont_data["memory"])
    )

    # dummy, linearize tree in dict
    res = aw.apply_filters([])
    return res

def main(options, args):
    global aw

    binary = args[0]
    if not os.path.exists(binary):
        print(binary, "does not exist")
        exit(1)

    r2 = r2pipe.open(binary)
    if r2.cmdj("iIj")["pic"]:
        base = 0x400000
    else:
        base = None
    compute_cfg(binary, JSON_DIR, base)

    p = angr.Project(binary, auto_load_libs=False)
    util.hook_all_models(p, models.network_models)
    util.hook_all_models(p, models.other_models)
    util.hook_all_internal(p, models.internal_functions)

    if options.address:
        state = p.factory.entry_state(addr=options.address)
        state.options.add(angr.options.ZERO_FILL_UNCONSTRAINED_MEMORY)
        state.options.add(angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS)
    else:
        state = None

    aw = AngrWrapper(p, os.path.join(JSON_DIR, "cfg_atb.json"), starting_state=state, concretize_addresses=True)
    aw.init_run()
    aw.dump_symbtree(os.path.join(JSON_DIR, "symbolic_tree.json"))
    aw.dump_leaves_info(os.path.join(JSON_DIR, "leaves.json"))
    aw.dump_symbols(os.path.join(JSON_DIR, "symbols.json"))
    aw.dump_coverage_loss(os.path.join(JSON_DIR, "coverage_loss.json"))

    eel.init(WEB_DIR, allowed_extensions=['.js', '.html'])
    web_app_options = {
        'mode': "chrome-app",
        'port': 8000,
        'chromeFlags': ["--aggressive-cache-discard"]
    }
    eel.start('index.html', suppress_error=True, options=web_app_options)

    IPython.embed()

if __name__=="__main__":
    if not os.path.exists(DATA_DIR):
        os.mkdir(DATA_DIR)
    if not os.path.exists(JSON_DIR):
        os.mkdir(JSON_DIR)

    parser = OptionParser(usage='usage: %prog binary [options]')
    parser.add_option(
        "-a", "--start-address", dest="address", default=None, type=int,
        help="(optional) start address. If not set, entrypoint",
    )

    options, args = parser.parse_args()

    if len(args) != 1:
        parser.error("no input binary")

    main(options, args)
